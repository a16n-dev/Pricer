service: pricer-backend
frameworkVersion: '2'
plugins:
  - serverless-functions-base-path
  - serverless-dynamodb-local
  - serverless-plugin-typescript
  - serverless-offline
custom:
  serverless-offline:
    httpPort: 4000
  functionsBasePath: src/handlers
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: 
          - productsTable
          - Arn
        - Fn::GetAtt:
          - unitsTable
          - Arn

resources: '${file(resources.yml)}'
functions:
  getProducts:
    handler: productHandler.getProducts
    events:
      - http:
          path: products
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  addProduct:
    handler: productHandler.addProduct
    events:
      - http:
          path: products/new
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  getUnits:
    handler: unitHandler.getUnits
    events:
      - http:
          path: units
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  addUnit:
    handler: unitHandler.addUnit
    events:
      - http:
          path: units/new
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  deleteUnit:
    handler: unitHandler.deleteUnit
    events:
      - http:
          path: units/{id}
          method: delete
          cors: true
          request:
            parameters:
                paths:
                  id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  updateUnit:
    handler: unitHandler.updateUnit
    events:
      - http:
          path: units/{id}
          method: patch
          cors: true
          request:
            parameters:
                paths:
                  id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  heartbeat:
    handler: utilHandler.heartbeat
    events:
      - http:
          path: heartbeat
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
  seedDB:
    handler: utilHandler.seedDB
    events:
      - http:
          path: seed
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer
